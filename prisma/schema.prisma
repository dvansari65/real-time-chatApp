// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  phoneNumber String   @unique
  avatar      String
  bio         String
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())
  password    String

  createdGroups  Group[]       @relation("createdGroups")
  memberOf       Group[]       @relation("groupMember")
  adminOf        Group[]       @relation("admins")
  sentMessages   Message[]     @relation("MessageSender")
  chatMembers    chatMember[]
  blockedUsers   BlockedUser[] @relation("BlockerUser")
  blockedByUsers BlockedUser[] @relation("BlockedUser")
  
}

model Chat {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  // relationships
  messages Message[]
  members  chatMember[]
}

model chatMember {
  id        Int       @id @default(autoincrement())
  userId    Int
  chatId    Int
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?
  role      Role      @default(MEMBER)
 
  //relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        Int             @id @default(autoincrement())
  content   String
  type      MessageType     @default(TEXT)
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  duration  Int?
  chatId    Int?
  senderId  Int
  replyToId Int?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  // Relationships
  chat      Chat?           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User            @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo   Message?        @relation("MessageReply", fields: [replyToId], references: [id])
  replies   Message[]       @relation("MessageReply")
  status    MessageStatus[]
}

model MessageStatus {
  id        Int            @id @default(autoincrement())
  messageId Int
  userId    Int
  status    DeliveryStatus @default(SENT)
  timestamp DateTime       @default(now())

  // Relationships
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_status")
}

model BlockedUser {
  id        Int @id @default(autoincrement())
  blockedId Int
  blockerId Int

  blocker User @relation("BlockerUser", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Group {
  id           Int     @id @default(autoincrement())
  profileImage String?
  userId       Int
  GroupMembers User[]  @relation("groupMember")
  name         String
  discription  String?
  admins       User[]  @relation("admins")
  createdBy    User    @relation("createdGroups", fields: [userId], references: [id])
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  VOICE
  LOCATION
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}
